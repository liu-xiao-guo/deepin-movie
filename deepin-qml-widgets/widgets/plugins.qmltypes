import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -noinstantiate Deepin.Widgets 1.0'

Module {
    Component {
        name: "DFileChooseDialogAide"
        prototype: "QObject"
        exports: ["DFileUtils 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "getLargeThumbnailPath"
            type: "string"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "getNormalThumbnailPath"
            type: "string"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "getIconName"
            type: "string"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "removeThumbnail"
            type: "bool"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "isImage"
            type: "bool"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "fileExist"
            type: "bool"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "fileIsDir"
            type: "bool"
            Parameter { name: "fileName"; type: "string" }
        }
    }
    Component {
        name: "DFileDialog"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["DFileDialog 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "fileUrl"; type: "QUrl"; isReadonly: true }
        Property { name: "fileUrls"; type: "QList<QUrl>"; isReadonly: true }
        Property { name: "folder"; type: "QUrl" }
        Property { name: "modality"; type: "Qt::WindowModality" }
        Property { name: "nameFilters"; type: "QList<QString>" }
        Property { name: "selectExisting"; type: "bool" }
        Property { name: "selectFolder"; type: "bool" }
        Property { name: "selectMultiple"; type: "bool" }
        Property { name: "selectedNameFilter"; type: "string" }
        Property { name: "title"; type: "string" }
        Property { name: "visible"; type: "bool" }
        Property { name: "saveMode"; type: "bool" }
        Property { name: "defaultFileName"; type: "string" }
        Property { name: "transientParent"; type: "QWindow"; isPointer: true }
        Signal { name: "accepted" }
        Signal { name: "rejected" }
        Method { name: "open" }
        Method { name: "close" }
    }
    Component {
        name: "DIcon"
        defaultProperty: "data"
        prototype: "QQuickPaintedItem"
        exports: ["DIcon 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "theme"; type: "string" }
        Property { name: "icon"; type: "string" }
        Signal {
            name: "themeChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "iconChanged"
            Parameter { type: "string" }
        }
    }
    Component {
        name: "DOverrideWindow"
        defaultProperty: "data"
        prototype: "DWindow"
        exports: ["DOverrideWindow 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "DPreviewWindow"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["DPreviewWindow 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "xid"; type: "uint" }
        Signal {
            name: "xidChanged"
            Parameter { type: "uint" }
        }
    }
    Component {
        name: "DSingleLineTip"
        prototype: "QWidget"
        exports: ["DSingleLineTip 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "x"; type: "int" }
        Property { name: "y"; type: "int" }
        Property { name: "width"; type: "int" }
        Property { name: "height"; type: "int" }
        Property { name: "radius"; type: "int" }
        Property { name: "borderWidth"; type: "int" }
        Property { name: "arrowHeight"; type: "int" }
        Property { name: "arrowWidth"; type: "int" }
        Property { name: "arrowLeftMargin"; type: "int" }
        Property { name: "destroyInterval"; type: "int" }
        Property { name: "fontPixelSize"; type: "int" }
        Property { name: "shadowWidth"; type: "int" }
        Property { name: "shadowColor"; type: "string" }
        Property { name: "borderColor"; type: "string" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "textColor"; type: "string" }
        Property { name: "toolTip"; type: "string" }
        Method { name: "showTip" }
        Method { name: "showTipAtLeft" }
        Method { name: "showTipAtRight" }
        Method { name: "showTipAtTop" }
        Method { name: "showTipAtBottom" }
        Method { name: "destroyTip" }
    }
    Component {
        name: "DWidgetStyleController"
        prototype: "QObject"
        exports: ["DUIStyle 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "styleList"; type: "QStringList"; isReadonly: true }
        Property { name: "currentWidgetStyle"; type: "string"; isReadonly: true }
        Property { name: "imagesPath"; type: "string"; isReadonly: true }
        Property { name: "configObject"; type: "QJsonObject"; isReadonly: true }
        Method {
            name: "setCurrentWidgetStyle"
            Parameter { name: "style"; type: "string" }
        }
        Method {
            name: "isAvailableStyle"
            type: "bool"
            Parameter { name: "style"; type: "string" }
        }
    }
    Component {
        name: "DWindow"
        defaultProperty: "data"
        prototype: "QQuickWindow"
        exports: ["DWindow 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "shadowWidth"; type: "int" }
        Signal { name: "qt5ScreenChanged" }
        Signal {
            name: "shadowWidthChanged"
            Parameter { name: "shadowWidth"; type: "int" }
        }
        Signal {
            name: "windowFocusChanged"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Signal {
            name: "mousePressed"
            Parameter { name: "point"; type: "QPointF" }
        }
        Signal {
            name: "wheel"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "focusChanged"
            Parameter { name: "win"; type: "QWindow"; isPointer: true }
        }
        Method {
            name: "handlerScreenChanged"
            Parameter { name: "s"; type: "QScreen"; isPointer: true }
        }
        Method { name: "getCursorPos"; type: "QPoint" }
        Method { name: "getWinId"; type: "int" }
    }
    Component {
        name: "KeysUtils"
        prototype: "QObject"
        exports: ["KeysUtils 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "overrideShortcut"
            Parameter { name: "oldShortcut"; type: "string" }
            Parameter { name: "newShortcut"; type: "string" }
        }
        Method {
            name: "getOverriddenShortcut"
            type: "string"
            Parameter { name: "shortcut"; type: "string" }
        }
        Method {
            name: "keyEventToString"
            type: "string"
            Parameter { name: "modifiers"; type: "int" }
            Parameter { name: "key"; type: "int" }
        }
        Method {
            name: "isKeyEventEqualToString"
            type: "bool"
            Parameter { name: "modifiers"; type: "int" }
            Parameter { name: "key"; type: "int" }
            Parameter { name: "targetString"; type: "string" }
        }
    }
    Component {
        name: "QQuickWindow"
        defaultProperty: "data"
        prototype: "QWindow"
        Enum {
            name: "SceneGraphError"
            values: {
                "ContextNotAvailable": 1
            }
        }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "color"; type: "QColor" }
        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property {
            name: "activeFocusItem"
            revision: 1
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
        }
        Signal { name: "frameSwapped" }
        Signal {
            name: "openglContextCreated"
            revision: 2
            Parameter { name: "context"; type: "QOpenGLContext"; isPointer: true }
        }
        Signal { name: "sceneGraphInitialized" }
        Signal { name: "sceneGraphInvalidated" }
        Signal { name: "beforeSynchronizing" }
        Signal { name: "afterSynchronizing"; revision: 2 }
        Signal { name: "beforeRendering" }
        Signal { name: "afterRendering" }
        Signal { name: "afterAnimating"; revision: 2 }
        Signal { name: "sceneGraphAboutToStop"; revision: 2 }
        Signal {
            name: "closing"
            revision: 1
            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
        }
        Signal {
            name: "colorChanged"
            Parameter { type: "QColor" }
        }
        Signal { name: "activeFocusItemChanged"; revision: 1 }
        Signal {
            name: "sceneGraphError"
            revision: 2
            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
            Parameter { name: "message"; type: "string" }
        }
        Method { name: "update" }
        Method { name: "releaseResources" }
    }
    Component {
        name: "QWidget"
        prototype: "QObject"
        Property { name: "modal"; type: "bool"; isReadonly: true }
        Property { name: "windowModality"; type: "Qt::WindowModality" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "geometry"; type: "QRect" }
        Property { name: "frameGeometry"; type: "QRect"; isReadonly: true }
        Property { name: "normalGeometry"; type: "QRect"; isReadonly: true }
        Property { name: "x"; type: "int"; isReadonly: true }
        Property { name: "y"; type: "int"; isReadonly: true }
        Property { name: "pos"; type: "QPoint" }
        Property { name: "frameSize"; type: "QSize"; isReadonly: true }
        Property { name: "size"; type: "QSize" }
        Property { name: "width"; type: "int"; isReadonly: true }
        Property { name: "height"; type: "int"; isReadonly: true }
        Property { name: "rect"; type: "QRect"; isReadonly: true }
        Property { name: "childrenRect"; type: "QRect"; isReadonly: true }
        Property { name: "childrenRegion"; type: "QRegion"; isReadonly: true }
        Property { name: "sizePolicy"; type: "QSizePolicy" }
        Property { name: "minimumSize"; type: "QSize" }
        Property { name: "maximumSize"; type: "QSize" }
        Property { name: "minimumWidth"; type: "int" }
        Property { name: "minimumHeight"; type: "int" }
        Property { name: "maximumWidth"; type: "int" }
        Property { name: "maximumHeight"; type: "int" }
        Property { name: "sizeIncrement"; type: "QSize" }
        Property { name: "baseSize"; type: "QSize" }
        Property { name: "palette"; type: "QPalette" }
        Property { name: "font"; type: "QFont" }
        Property { name: "cursor"; type: "QCursor" }
        Property { name: "mouseTracking"; type: "bool" }
        Property { name: "isActiveWindow"; type: "bool"; isReadonly: true }
        Property { name: "focusPolicy"; type: "Qt::FocusPolicy" }
        Property { name: "focus"; type: "bool"; isReadonly: true }
        Property { name: "contextMenuPolicy"; type: "Qt::ContextMenuPolicy" }
        Property { name: "updatesEnabled"; type: "bool" }
        Property { name: "visible"; type: "bool" }
        Property { name: "minimized"; type: "bool"; isReadonly: true }
        Property { name: "maximized"; type: "bool"; isReadonly: true }
        Property { name: "fullScreen"; type: "bool"; isReadonly: true }
        Property { name: "sizeHint"; type: "QSize"; isReadonly: true }
        Property { name: "minimumSizeHint"; type: "QSize"; isReadonly: true }
        Property { name: "acceptDrops"; type: "bool" }
        Property { name: "windowTitle"; type: "string" }
        Property { name: "windowIcon"; type: "QIcon" }
        Property { name: "windowIconText"; type: "string" }
        Property { name: "windowOpacity"; type: "double" }
        Property { name: "windowModified"; type: "bool" }
        Property { name: "toolTip"; type: "string" }
        Property { name: "toolTipDuration"; type: "int" }
        Property { name: "statusTip"; type: "string" }
        Property { name: "whatsThis"; type: "string" }
        Property { name: "accessibleName"; type: "string" }
        Property { name: "accessibleDescription"; type: "string" }
        Property { name: "layoutDirection"; type: "Qt::LayoutDirection" }
        Property { name: "autoFillBackground"; type: "bool" }
        Property { name: "styleSheet"; type: "string" }
        Property { name: "locale"; type: "QLocale" }
        Property { name: "windowFilePath"; type: "string" }
        Property { name: "inputMethodHints"; type: "Qt::InputMethodHints" }
        Signal {
            name: "windowTitleChanged"
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "windowIconChanged"
            Parameter { name: "icon"; type: "QIcon" }
        }
        Signal {
            name: "windowIconTextChanged"
            Parameter { name: "iconText"; type: "string" }
        }
        Signal {
            name: "customContextMenuRequested"
            Parameter { name: "pos"; type: "QPoint" }
        }
        Method {
            name: "setEnabled"
            Parameter { type: "bool" }
        }
        Method {
            name: "setDisabled"
            Parameter { type: "bool" }
        }
        Method {
            name: "setWindowModified"
            Parameter { type: "bool" }
        }
        Method {
            name: "setWindowTitle"
            Parameter { type: "string" }
        }
        Method {
            name: "setStyleSheet"
            Parameter { name: "styleSheet"; type: "string" }
        }
        Method { name: "setFocus" }
        Method { name: "update" }
        Method { name: "repaint" }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setHidden"
            Parameter { name: "hidden"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "grab"
            type: "QPixmap"
            Parameter { name: "rectangle"; type: "QRect" }
        }
        Method { name: "grab"; type: "QPixmap" }
    }
    Component {
        name: "QWindow"
        prototype: "QObject"
        Enum {
            name: "Visibility"
            values: {
                "Hidden": 0,
                "AutomaticVisibility": 1,
                "Windowed": 2,
                "Minimized": 3,
                "Maximized": 4,
                "FullScreen": 5
            }
        }
        Property { name: "title"; type: "string" }
        Property { name: "modality"; type: "Qt::WindowModality" }
        Property { name: "flags"; type: "Qt::WindowFlags" }
        Property { name: "x"; type: "int" }
        Property { name: "y"; type: "int" }
        Property { name: "width"; type: "int" }
        Property { name: "height"; type: "int" }
        Property { name: "minimumWidth"; type: "int" }
        Property { name: "minimumHeight"; type: "int" }
        Property { name: "maximumWidth"; type: "int" }
        Property { name: "maximumHeight"; type: "int" }
        Property { name: "visible"; type: "bool" }
        Property { name: "active"; revision: 1; type: "bool"; isReadonly: true }
        Property { name: "visibility"; revision: 1; type: "Visibility" }
        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation" }
        Property { name: "opacity"; revision: 1; type: "double" }
        Signal {
            name: "screenChanged"
            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
        }
        Signal {
            name: "modalityChanged"
            Parameter { name: "modality"; type: "Qt::WindowModality" }
        }
        Signal {
            name: "windowStateChanged"
            Parameter { name: "windowState"; type: "Qt::WindowState" }
        }
        Signal {
            name: "windowTitleChanged"
            revision: 2
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "xChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            revision: 1
            Parameter { name: "visibility"; type: "QWindow::Visibility" }
        }
        Signal { name: "activeChanged"; revision: 1 }
        Signal {
            name: "contentOrientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "focusObjectChanged"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            revision: 1
            Parameter { name: "opacity"; type: "double" }
        }
        Method { name: "requestActivate"; revision: 1 }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "setTitle"
            Parameter { type: "string" }
        }
        Method {
            name: "setX"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setY"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setWidth"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setMinimumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMinimumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setMaximumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMaximumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "alert"
            revision: 1
            Parameter { name: "msec"; type: "int" }
        }
    }
    Component {
        prototype: "QObject"
        name: "DPalette"
        exports: ["DPalette -1.-1"]
        exportMetaObjectRevisions: [-1]
        isComposite: true
        isCreatable: false
        isSingleton: true
        Property { name: "currentWidgetStyle"; type: "string" }
        Property { name: "imagesPath"; type: "string" }
        Property { name: "contentBgColor"; type: "QColor" }
        Property { name: "panelBgColor"; type: "QColor" }
        Property { name: "tabBgColor"; type: "QColor" }
        Property { name: "radioItemSelectedColor"; type: "QColor" }
        Property { name: "tooltipBorderColor"; type: "QColor" }
        Property { name: "textSelectedBgColor"; type: "QColor" }
        Property { name: "inputGrooveColor"; type: "QColor" }
        Property { name: "buttonGrooveColor"; type: "QColor" }
        Property { name: "textActiveColor"; type: "QColor" }
        Property { name: "textHoverColor"; type: "QColor" }
        Property { name: "textNormalColor"; type: "QColor" }
        Property { name: "textHintColor"; type: "QColor" }
        Property { name: "linkColor"; type: "QColor" }
        Property { name: "itemTipColor"; type: "QColor" }
        Property { name: "warningColor"; type: "QColor" }
        Property { name: "buttonHeight"; type: "int"; isReadonly: true }
        Property { name: "menuItemHeight"; type: "int"; isReadonly: true }
        Property { name: "expandHeaderHeight"; type: "int"; isReadonly: true }
        Property { name: "contentHeaderHeight"; type: "int"; isReadonly: true }
        Property { name: "radioItemHeight"; type: "int"; isReadonly: true }
        Property { name: "headerLeftMargin"; type: "int"; isReadonly: true }
        Property { name: "headerRightMargin"; type: "int"; isReadonly: true }
        Property { name: "textLeftMargin"; type: "int"; isReadonly: true }
        Property { name: "textRightMargin"; type: "int"; isReadonly: true }
        Property { name: "buttonMargin"; type: "int"; isReadonly: true }
        Property { name: "textButtonMinWidth"; type: "int"; isReadonly: true }
        Property { name: "imageButtonWidth"; type: "int"; isReadonly: true }
        Property { name: "fontSize"; type: "int"; isReadonly: true }
        Property { name: "normalRadius"; type: "int"; isReadonly: true }
        Property { name: "styleList"; type: "QVariant" }
        Property { name: "configObj"; type: "QVariant" }
        Property { name: "generalConfigObj"; type: "QVariant" }
        Property { name: "outsideBorderObj"; type: "QVariant" }
        Property { name: "insideBorderObj"; type: "QVariant" }
        Property { name: "popupShadowObj"; type: "QVariant" }
        Property { name: "buttonGradientObj"; type: "QVariant" }
        Property { name: "tooltipGradientObj"; type: "QVariant" }
        Property { name: "popupMenuObj"; type: "QVariant" }
        Property { name: "separatorStyle"; type: "QVariant" }
        Property { name: "switchButtonStyle"; type: "QVariant" }
        Method {
            name: "marshalJSON"
            type: "QVariant"
            Parameter { name: "value"; type: "QVariant" }
        }
    }
}
